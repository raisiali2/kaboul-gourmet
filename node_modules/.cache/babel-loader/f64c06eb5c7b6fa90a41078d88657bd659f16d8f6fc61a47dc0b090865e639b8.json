{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a923304\\\\Downloads\\\\kaboul Gourmet\\\\src\\\\components\\\\common\\\\AnimatedElement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { motion, useReducedMotion } from 'framer-motion';\n\n/**\r\n * AnimatedElement Component - Performance Optimized\r\n * \r\n * A wrapper component that adds hover animations to any element\r\n * with performance optimizations for 60fps\r\n * \r\n * @param {string} as - The element type to render (default: 'div')\r\n * @param {string} className - Additional CSS classes\r\n * @param {string} hoverEffect - Type of hover effect: 'scale', 'float', 'glow', or 'none'\r\n * @param {boolean} enableOnMobile - Whether to enable animations on mobile (defaults to true)\r\n * @param {node} children - Element content\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimatedElement = ({\n  as = 'div',\n  className = '',\n  hoverEffect = 'scale',\n  enableOnMobile = true,\n  children,\n  ...props\n}) => {\n  _s();\n  // Check if user prefers reduced motion\n  const prefersReducedMotion = useReducedMotion();\n\n  // Check if on mobile/tablet\n  const [isMobile, setIsMobile] = useState(false);\n  const [hasTouch, setHasTouch] = useState(false);\n  useEffect(() => {\n    // Check device capabilities on mount\n    const checkDevice = () => {\n      setIsMobile(window.innerWidth <= 768);\n      setHasTouch('ontouchstart' in window || navigator.maxTouchPoints > 0);\n    };\n    checkDevice();\n    window.addEventListener('resize', checkDevice);\n    return () => {\n      window.removeEventListener('resize', checkDevice);\n    };\n  }, []);\n\n  // Skip animations entirely in certain conditions for performance\n  const shouldDisableEffects = prefersReducedMotion || isMobile && !enableOnMobile || hoverEffect === 'none';\n\n  // Define hover animations - optimized for performance\n  const hoverAnimations = {\n    scale: {\n      scale: isMobile ? 1.03 : 1.05,\n      // Reduced scale effect on mobile\n      transition: {\n        duration: isMobile ? 0.15 : 0.2,\n        ease: \"easeOut\"\n      }\n    },\n    float: {\n      y: isMobile ? -3 : -5,\n      // Smaller float on mobile\n      transition: {\n        duration: isMobile ? 0.2 : 0.3,\n        ease: \"easeOut\"\n      }\n    },\n    glow: {\n      boxShadow: isMobile ? \"0px 0px 8px rgba(241, 180, 56, 0.3)\" : \"0px 0px 15px rgba(241, 180, 56, 0.4)\",\n      transition: {\n        duration: 0.3,\n        ease: \"easeOut\"\n      }\n    },\n    none: {}\n  };\n\n  // Simplified effects for accessibility\n  const accessibleAnimations = {\n    scale: {\n      scale: 1.02,\n      transition: {\n        duration: 0.2\n      }\n    },\n    float: {\n      opacity: 0.8,\n      transition: {\n        duration: 0.2\n      }\n    },\n    glow: {\n      opacity: 0.8,\n      transition: {\n        duration: 0.2\n      }\n    },\n    none: {}\n  };\n\n  // Use appropriate animations based on device and preferences\n  const effectToUse = shouldDisableEffects ? 'none' : hoverEffect;\n\n  // For touch devices, don't use hover effects that might get stuck\n  const finalEffect = hasTouch && (effectToUse === 'float' || effectToUse === 'glow') ? 'scale' : effectToUse;\n  const hoverAnimation = prefersReducedMotion ? accessibleAnimations[finalEffect] : hoverAnimations[finalEffect] || hoverAnimations.none;\n\n  // Create the motion component with the specified element type\n  const MotionComponent = motion[as];\n  return /*#__PURE__*/_jsxDEV(MotionComponent, {\n    className: `animated-element ${className}`,\n    whileHover: shouldDisableEffects ? undefined : hoverAnimation,\n    style: shouldDisableEffects ? {} : {\n      willChange: hoverEffect !== 'none' ? 'transform, box-shadow' : 'auto',\n      transform: 'translateZ(0)',\n      // Force GPU acceleration\n      backfaceVisibility: 'hidden',\n      WebkitBackfaceVisibility: 'hidden',\n      perspective: 1000,\n      WebkitPerspective: 1000\n    },\n    ...props,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimatedElement, \"jqsbpvPkB5EfemQk2CpHbAD4Nwc=\", false, function () {\n  return [useReducedMotion];\n});\n_c = AnimatedElement;\nexport default AnimatedElement;\nvar _c;\n$RefreshReg$(_c, \"AnimatedElement\");","map":{"version":3,"names":["React","useState","useEffect","motion","useReducedMotion","jsxDEV","_jsxDEV","AnimatedElement","as","className","hoverEffect","enableOnMobile","children","props","_s","prefersReducedMotion","isMobile","setIsMobile","hasTouch","setHasTouch","checkDevice","window","innerWidth","navigator","maxTouchPoints","addEventListener","removeEventListener","shouldDisableEffects","hoverAnimations","scale","transition","duration","ease","float","y","glow","boxShadow","none","accessibleAnimations","opacity","effectToUse","finalEffect","hoverAnimation","MotionComponent","whileHover","undefined","style","willChange","transform","backfaceVisibility","WebkitBackfaceVisibility","perspective","WebkitPerspective","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/a923304/Downloads/kaboul Gourmet/src/components/common/AnimatedElement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { motion, useReducedMotion } from 'framer-motion';\r\n\r\n/**\r\n * AnimatedElement Component - Performance Optimized\r\n * \r\n * A wrapper component that adds hover animations to any element\r\n * with performance optimizations for 60fps\r\n * \r\n * @param {string} as - The element type to render (default: 'div')\r\n * @param {string} className - Additional CSS classes\r\n * @param {string} hoverEffect - Type of hover effect: 'scale', 'float', 'glow', or 'none'\r\n * @param {boolean} enableOnMobile - Whether to enable animations on mobile (defaults to true)\r\n * @param {node} children - Element content\r\n */\r\nconst AnimatedElement = ({ \r\n  as = 'div', \r\n  className = '', \r\n  hoverEffect = 'scale',\r\n  enableOnMobile = true,\r\n  children,\r\n  ...props \r\n}) => {\r\n  // Check if user prefers reduced motion\r\n  const prefersReducedMotion = useReducedMotion();\r\n  \r\n  // Check if on mobile/tablet\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [hasTouch, setHasTouch] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // Check device capabilities on mount\r\n    const checkDevice = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n      setHasTouch('ontouchstart' in window || navigator.maxTouchPoints > 0);\r\n    };\r\n    \r\n    checkDevice();\r\n    window.addEventListener('resize', checkDevice);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', checkDevice);\r\n    };\r\n  }, []);\r\n  \r\n  // Skip animations entirely in certain conditions for performance\r\n  const shouldDisableEffects = \r\n    prefersReducedMotion || \r\n    (isMobile && !enableOnMobile) || \r\n    hoverEffect === 'none';\r\n\r\n  // Define hover animations - optimized for performance\r\n  const hoverAnimations = {\r\n    scale: {\r\n      scale: isMobile ? 1.03 : 1.05, // Reduced scale effect on mobile\r\n      transition: { \r\n        duration: isMobile ? 0.15 : 0.2, \r\n        ease: \"easeOut\" \r\n      }\r\n    },\r\n    float: {\r\n      y: isMobile ? -3 : -5, // Smaller float on mobile\r\n      transition: { \r\n        duration: isMobile ? 0.2 : 0.3, \r\n        ease: \"easeOut\" \r\n      }\r\n    },\r\n    glow: {\r\n      boxShadow: isMobile \r\n        ? \"0px 0px 8px rgba(241, 180, 56, 0.3)\" \r\n        : \"0px 0px 15px rgba(241, 180, 56, 0.4)\",\r\n      transition: { \r\n        duration: 0.3, \r\n        ease: \"easeOut\" \r\n      }\r\n    },\r\n    none: {}\r\n  };\r\n\r\n  // Simplified effects for accessibility\r\n  const accessibleAnimations = {\r\n    scale: { scale: 1.02, transition: { duration: 0.2 } },\r\n    float: { opacity: 0.8, transition: { duration: 0.2 } },\r\n    glow: { opacity: 0.8, transition: { duration: 0.2 } },\r\n    none: {}\r\n  };\r\n\r\n  // Use appropriate animations based on device and preferences\r\n  const effectToUse = shouldDisableEffects ? 'none' : hoverEffect;\r\n  \r\n  // For touch devices, don't use hover effects that might get stuck\r\n  const finalEffect = hasTouch && (effectToUse === 'float' || effectToUse === 'glow') \r\n    ? 'scale' \r\n    : effectToUse;\r\n    \r\n  const hoverAnimation = prefersReducedMotion \r\n    ? accessibleAnimations[finalEffect] \r\n    : hoverAnimations[finalEffect] || hoverAnimations.none;\r\n  \r\n  // Create the motion component with the specified element type\r\n  const MotionComponent = motion[as];\r\n  \r\n  return (\r\n    <MotionComponent\r\n      className={`animated-element ${className}`}\r\n      whileHover={shouldDisableEffects ? undefined : hoverAnimation}\r\n      style={shouldDisableEffects ? {} : { \r\n        willChange: hoverEffect !== 'none' ? 'transform, box-shadow' : 'auto',\r\n        transform: 'translateZ(0)', // Force GPU acceleration\r\n        backfaceVisibility: 'hidden',\r\n        WebkitBackfaceVisibility: 'hidden',\r\n        perspective: 1000,\r\n        WebkitPerspective: 1000,\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </MotionComponent>\r\n  );\r\n};\r\n\r\nexport default AnimatedElement; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}